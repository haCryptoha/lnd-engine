FROM golang:1.10

LABEL maintainer="Danny Paz <kinesis.exchange>"

# Force Go to use the cgo based DNS resolver. This is required to ensure DNS
# queries required to connect to linked containers succeed.
ENV GODEBUG netdns=cgo

# Install dep to manage vendor.
RUN go get -u github.com/golang/dep/cmd/dep

# Grab and install the latest version of lnd and all related dependencies.
RUN go get -d github.com/lightningnetwork/lnd

# Make lnd folder default.
WORKDIR $GOPATH/src/github.com/lightningnetwork/lnd

# Install dependencies and install/build lnd.
RUN dep ensure
RUN go install . ./cmd/...

# Generate certs for NodeJS gRPC
# NOTE: "Beware that lnd autogenerated certificates are not compatible with current
# NodeJS gRPC module implementation. Lnd uses the P-521 curve for its certificates
# but NodeJS gRPC module is only compatible with certificates using the P-256 curve"
#
# More info here: https://github.com/mably/lncli-web#generate-lnd-certificates-compatible-with-nodejs-grpc
#
RUN mkdir "/secure"

ARG TLS_KEY='/secure/lnd-engine-tls.key'
ARG TLS_CERT='/secure/lnd-engine-tls.cert'
ARG TLS_CSR='/secure/lnd-engine-csr.csr'

# # Manually generate certificate and add all domains, it is needed to connect
# # "btcctl" and "lnd" to "btcd" over docker links.
RUN openssl ecparam -genkey -name prime256v1 -out $TLS_KEY
RUN openssl req -new -sha256 -key $TLS_KEY -out $TLS_CSR -subj '/CN=lnd_btc/O=lnd'
RUN openssl req -x509 -sha256 -days 36500 -key $TLS_KEY -in $TLS_CSR -out $TLS_CERT
RUN rm $TLS_CSR

# Create a volume to house lnd certs/keys.
# You should NOT do this before certificate generation!
# Otherwise manually generated certificate will be overridden with shared
# mounted volume! For more info read dockerfile "VOLUME" documentation.
VOLUME ["/secure"]

COPY "lnd/start-lnd.sh" .

RUN chmod +x start-lnd.sh
